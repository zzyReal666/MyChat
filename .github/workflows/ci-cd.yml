name: MyChat CI/CD Pipeline

# 触发条件：推送到main分支或创建PR时
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  # 手动触发
  workflow_dispatch:

# 环境变量
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# 全局超时设置
jobs:
  # ==================== 代码质量检查 ====================
  code-quality:
    name: 代码质量检查
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 检出代码
        uses: actions/checkout@v4     
      - name: 设置Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10          
      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: 安装Python依赖
        run: |
          cd backend
          pip install flake8 isort mypy pytest pytest-cov bandit safety
          
      - name: 安装Node.js依赖
        run: |
          cd frontend
          npm ci
          
      - name: Python代码格式化检查
        run: |
          cd backend
          black --check --diff .
          isort --check-only --diff .
          
      - name: Python代码风格检查
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
          
      - name: Python类型检查
        run: |
          cd backend
          mypy . --ignore-missing-imports
          
      - name: ESLint检查
        run: |
          cd frontend
          npm run lint || echo "ESLint not configured, skipping..."
          
      - name: 代码覆盖率检查
        run: |
          cd backend
          pytest --cov=app --cov-report=xml --cov-report=term-missing
          
      - name: 上传覆盖率报告
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage

  # ==================== 安全扫描 ====================
  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: 检出代码
        uses: actions/checkout@v4     
      - name: 设置Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10          
      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: 安装安全扫描工具
        run: |
          cd backend
          pip install bandit safety
          cd ../frontend
          npm install -g audit-ci
          
      - name: Python安全扫描
        run: |
          cd backend
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true
          
      - name: Node.js安全扫描
        run: |
          cd frontend
          npm audit --audit-level=moderate || true
          
      - name: 上传安全扫描报告
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json
          retention-days: 30

  # ==================== 后端测试 ====================
  test-backend:
    name: 后端测试
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432        
    steps:
      - name: 检出代码
        uses: actions/checkout@v4     
      - name: 设置Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10          
      - name: 缓存Python依赖
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: 安装后端依赖
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx
          
      - name: 运行后端测试
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          ENVIRONMENT: test
        run: |
          cd backend
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
          
      - name: 上传测试覆盖率报告
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: backend/htmlcov/
          retention-days: 30

  # ==================== 前端测试 ====================
  test-frontend:
    name: 前端测试
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: 检出代码
        uses: actions/checkout@v4     
      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: 安装前端依赖
        run: |
          cd frontend
          npm ci
          
      - name: 运行前端测试
        run: |
          cd frontend
          npm test || echo "No tests configured"
      - name: 构建前端
        run: |
          cd frontend
          npm run build
          
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 30

  # ==================== 构建Docker镜像 ====================
  build-images:
    name: 构建Docker镜像
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    timeout-minutes: 30
    steps:
      - name: 检出代码
        uses: actions/checkout@v4     
      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3     
      - name: 登录到容器注册表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            
      - name: 构建后端镜像
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: 构建前端镜像
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==================== 部署到测试环境 ====================
  deploy-staging:
    name: 部署到测试环境
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    timeout-minutes: 20
    steps:
      - name: 检出代码
        uses: actions/checkout@v4     
      - name: 设置Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      - name: 配置Kubernetes上下文
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          
      - name: 部署到Kubernetes
        run: |
          export KUBECONFIG=kubeconfig.yaml
          kubectl apply -f deploy/k8s/
          kubectl set image deployment/backend-deployment backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          kubectl set image deployment/frontend-deployment frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          
      - name: 等待部署完成
        run: |
          export KUBECONFIG=kubeconfig.yaml
          kubectl rollout status deployment/backend-deployment --timeout=300s
          kubectl rollout status deployment/frontend-deployment --timeout=300s

  # ==================== 部署到生产环境 ====================
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    environment: production
    timeout-minutes: 30
    steps:
      - name: 检出代码
        uses: actions/checkout@v4     
      - name: 设置Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      - name: 配置Kubernetes上下文
        run: |
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          
      - name: 部署到Kubernetes
        run: |
          export KUBECONFIG=kubeconfig.yaml
          kubectl apply -f deploy/k8s/
          kubectl set image deployment/backend-deployment backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          kubectl set image deployment/frontend-deployment frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          
      - name: 等待部署完成
        run: |
          export KUBECONFIG=kubeconfig.yaml
          kubectl rollout status deployment/backend-deployment --timeout=300s
          kubectl rollout status deployment/frontend-deployment --timeout=300s
          
      - name: 健康检查
        run: |
          export KUBECONFIG=kubeconfig.yaml
          # 等待服务启动
          sleep 30
          # 检查后端健康状态
          kubectl get pods -l app=backend
          # 检查前端健康状态
          kubectl get pods -l app=frontend

  # ==================== 通知 ====================
  notify:
    name: 通知
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 发送Slack通知
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
        
      - name: 发送邮件通知
        run: |
          echo "部署状态: ${{ needs.deploy-staging.result || needs.deploy-production.result }}"
          # 这里可以集成邮件发送服务
        if: always() 